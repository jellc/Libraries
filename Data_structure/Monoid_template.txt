struct monoid
{
    struct value_type
    {
        
    };

    value_type identity()
    {

    }
    value_type operator()(const value_type &x, const value_type &y)
    {

    }
};


template <class T>
struct min_monoid
{
    using value_type = T;
    T identity()
    {
        // return 0;
        return std::numeric_limits<T>::max();
    }
    T operator()(const T &x, const T &y)
    {
        return std::min(x,y);
    }
};


template <class T>
struct max_monoid
{
    using value_type = T;
    T identity()
    {
        // return std::numeric_limits<T>::min();
        return 0;
    }
    T operator()(const T &x, const T &y)
    {
        return std::max(x,y);
    }
};


template <class T>
struct plus_monoid
{
    using value_type = T;
    T identity()
    {
        return T(0);
    }
    T operator()(const T &x, const T &y)
    {
        return x+y;
    }
};


template <class T>
struct plus_size_monoid
{
    struct value_type
    {
        T val;
        size_t size;
    };
    value_type identity()
    {
        return {0,0};
    }
    value_type operator()(const value_type &x, const value_type &y)
    {
        return {x.val + y.val, x.size + y.size};
    }
    friend value_type &operator+=(value_type &x, T val)
    {
        return x.val += val * x.size, x;
    }
};