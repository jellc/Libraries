struct action
{
    struct value_type
    {

    };

    value_type identity()
    {

    }
    void operator()(value_type &x, const value_type &y)
    {

    }
    template <class other>
    void act(other &x, const value_type &y)
    {

    }
};


template <class T>
struct min_action
{
    using value_type = T;
    value_type identity()
    {
        return std::numeric_limits<T>::max();
    }
    void operator()(value_type &x, value_type y)
    {
        if(x > y) x = y;
    }
    template <class other>
    void act(other &x, value_type y)
    {
        if(x > y) x = y;
    }
};


template <class T>
struct max_action
{
    using value_type = T;
    value_type identity()
    {
        return std::numeric_limits<T>::min();
    }
    void operator()(value_type &x, value_type y)
    {
        if(x < y) x = y;
    }
    template <class other>
    void act(other &x, value_type y)
    {
        if(x < y) x = y;
    }
};


template <class T>
struct add_action
{
    using value_type = T;
    value_type identity()
    {
        return 0;
    }
    void operator()(value_type &x, value_type y)
    {
        x += y;
    }
    template <class other>
    void act(other &x, value_type y)
    {
        x += y;
    }
};
